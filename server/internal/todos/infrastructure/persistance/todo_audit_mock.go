// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package persistance

import (
	"context"
	"sync"
)

// Ensure, that AuditRepositoryMock does implement AuditRepository.
// If this is not the case, regenerate this file with moq.
var _ AuditRepository = &AuditRepositoryMock{}

// AuditRepositoryMock is a mock implementation of AuditRepository.
//
//	func TestSomethingThatUsesAuditRepository(t *testing.T) {
//
//		// make and configure a mocked AuditRepository
//		mockedAuditRepository := &AuditRepositoryMock{
//			CreateFunc: func(ctx context.Context, todo TodoAudit) error {
//				panic("mock out the Create method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]TodoAudit, error) {
//				panic("mock out the GetAll method")
//			},
//			GetByIDFunc: func(ctx context.Context, id int) (TodoAudit, error) {
//				panic("mock out the GetByID method")
//			},
//		}
//
//		// use mockedAuditRepository in code that requires AuditRepository
//		// and then make assertions.
//
//	}
type AuditRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, todo TodoAudit) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]TodoAudit, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int) (TodoAudit, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Todo is the todo argument value.
			Todo TodoAudit
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
	}
	lockCreate  sync.RWMutex
	lockGetAll  sync.RWMutex
	lockGetByID sync.RWMutex
}

// Create calls CreateFunc.
func (mock *AuditRepositoryMock) Create(ctx context.Context, todo TodoAudit) error {
	if mock.CreateFunc == nil {
		panic("AuditRepositoryMock.CreateFunc: method is nil but AuditRepository.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Todo TodoAudit
	}{
		Ctx:  ctx,
		Todo: todo,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, todo)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedAuditRepository.CreateCalls())
func (mock *AuditRepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	Todo TodoAudit
} {
	var calls []struct {
		Ctx  context.Context
		Todo TodoAudit
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *AuditRepositoryMock) GetAll(ctx context.Context) ([]TodoAudit, error) {
	if mock.GetAllFunc == nil {
		panic("AuditRepositoryMock.GetAllFunc: method is nil but AuditRepository.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedAuditRepository.GetAllCalls())
func (mock *AuditRepositoryMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *AuditRepositoryMock) GetByID(ctx context.Context, id int) (TodoAudit, error) {
	if mock.GetByIDFunc == nil {
		panic("AuditRepositoryMock.GetByIDFunc: method is nil but AuditRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedAuditRepository.GetByIDCalls())
func (mock *AuditRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}
